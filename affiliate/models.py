import decimal
import hashlib

from django.conf import settings
# from django.contrib.sessions.models import Session
from django.db import models

from order.models import Payment


class AffiliatePlan(models.Model):
    """This table represents the plan an affiliate partner is on. 
    You might only have one plan for your entire site.

    commission_rate = % affiliate will receive on purchases.
    cookie_expiration = number of days for which the cookie will be valid.
    payout_threshold = minimum dollar amount required for affiliate to receive payout.
    payout_date = date of month payouts are to be made.
    
    """
    plan_name           = models.CharField(max_length=255, unique=True)
    commission_rate     = models.DecimalField(decimal_places=2, max_digits=5, default=0.10)
    payout_date         = models.IntegerField(default=15)
    payout_threshold    = models.IntegerField(default=20)
    cookie_expiration   = models.IntegerField(default=15)

    def __str__(self):
        return self.plan_name


class AffiliatePartner(models.Model):

    user_id             = models.OneToOneField(to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    plan_id             = models.ForeignKey(to=AffiliatePlan, on_delete=models.SET_NULL, null=True, blank=True)
    ref_code            = models.CharField(max_length=255, unique=True)
    cookie_signer       = models.CharField(max_length=32, unique=True)
    amount_payable      = models.DecimalField(decimal_places=2, max_digits=15, default=0)
    total_paid          = models.DecimalField(decimal_places=2, max_digits=15, default=0)
    partnership_active  = models.BooleanField(default=True)
    partnership_began   = models.DateTimeField(auto_now_add=True)


    def save(self, *args, **kwargs):
        """self.cookie_signer is a hash of the following values:
        ref_code + user id + timestamp when partnership_began
        """
        if len(self.cookie_signer) != 32:
            time_string = self.partnership_began.timestamp()
            signer_string = f"{self.ref_code}{self.user_id.id}{time_string}"            
            self.cookie_signer = hashlib.md5(signer_string.encode()).hexdigest()
        super(AffiliatePartner, self).save(*args, **kwargs)


    def __str__(self):
        return f"{self.user_id.email} (affiliate)"


    def websites(self) -> models.QuerySet:
        """Returns a QuerySet of websites owned by this affiliate partner."""
        return self.partnerwebsite_set.all()


    def total_clicks(self) -> int:
        """Total clicks generated by this affiliate partner's links."""
        return self.clicks_set.all().count()


    def total_signups(self) -> int:
        """Total number of users who have signed up 
        after clicking the affiliate partner's link.
        """
        return self.signup_set.all().count()


    def total_purchased(self) -> decimal.Decimal:
        """Total $ amount purchased from this affiliate partner's referrals."""
        total = 0
        for purchase in self.affiliatepurchase_set.all():
            total += purchase.payment_id.amount_paid

        return decimal.Decimal(total)


    def click_signup_ratio(self) -> float:
        """Ratio of clicks/signups to measure how productive 
        this affilaite relationship is.
        """
        ratio = self.total_clicks() / self.total_signups()
        return ratio


class PartnerWebsite(models.Model):

    affiliate_id    = models.ForeignKey(to=AffiliatePartner, on_delete=models.CASCADE)
    site_url        = models.URLField(max_length=255)

    def __str__(self):
        return self.site_url



class ReferralClick(models.Model):

    affiliate_id    = models.ForeignKey(to=AffiliatePartner, on_delete=models.CASCADE)
    cookie_value    = models.CharField(max_length=32, unique=True)
    date_clicked    = models.DateTimeField(auto_now_add=True)



class ReferralSignUp(models.Model):

    user_id         = models.OneToOneField(to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    affiliate_id    = models.ForeignKey(to=AffiliatePartner, on_delete=models.CASCADE)
    click_id        = models.OneToOneField(to=ReferralClick, on_delete=models.SET_NULL, null=True, blank=True)
    date_signup     = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user_id.email} (referral)"


class ReferralPurchase(models.Model):

    affiliate_id    = models.ForeignKey(to=AffiliatePartner, on_delete=models.CASCADE)
    amount_paid     = models.DecimalField(decimal_places=2, max_digits=10)
    date_purchased  = models.DateTimeField(auto_now_add=True)


    def commission(self) -> decimal.Decimal:
        """Calculates the commission to be paid to the affiliate partner, 
        based on their plan's % rate.
        """
        purchase_amount = self.payment_id.amount_paid
        commission_rate = self.affiliate_id.plan_id.commission_rate

        return purchase_amount * commission_rate